const r={normal:0,add:1,multiply:2,screen:3,overlay:4,erase:5,"normal-npm":6,"add-npm":7,"screen-npm":8},e=0,s=1,n=2,i=3,o=4,a=5,d=class l{constructor(){this.data=0,this.blendMode="normal",this.polygonOffset=0,this.blend=!0,this.depthMask=!0}get blend(){return!!(this.data&1<<e)}set blend(t){!!(this.data&1<<e)!==t&&(this.data^=1<<e)}get offsets(){return!!(this.data&1<<s)}set offsets(t){!!(this.data&1<<s)!==t&&(this.data^=1<<s)}set cullMode(t){if(t==="none"){this.culling=!1;return}this.culling=!0,this.clockwiseFrontFace=t==="front"}get cullMode(){return this.culling?this.clockwiseFrontFace?"front":"back":"none"}get culling(){return!!(this.data&1<<n)}set culling(t){!!(this.data&1<<n)!==t&&(this.data^=1<<n)}get depthTest(){return!!(this.data&1<<i)}set depthTest(t){!!(this.data&1<<i)!==t&&(this.data^=1<<i)}get depthMask(){return!!(this.data&1<<a)}set depthMask(t){!!(this.data&1<<a)!==t&&(this.data^=1<<a)}get clockwiseFrontFace(){return!!(this.data&1<<o)}set clockwiseFrontFace(t){!!(this.data&1<<o)!==t&&(this.data^=1<<o)}get blendMode(){return this._blendMode}set blendMode(t){this.blend=t!=="none",this._blendMode=t,this._blendModeId=r[t]||0}get polygonOffset(){return this._polygonOffset}set polygonOffset(t){this.offsets=!!t,this._polygonOffset=t}toString(){return`[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`}static for2d(){const t=new l;return t.depthTest=!1,t.blend=!0,t}};d.default2d=d.for2d();let h=d;export{h as S};
