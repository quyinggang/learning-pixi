import{E as p,U as Ee,c as ee,n as z,M as R,b as Ye,o as ue,w as de,T as U,g as Xe,B as he,q as v,s as Ne,D as A,R as Y,L as qe,p as W,t as je,u as te,e as X,x as N,y as Ke,z as re,l as w,F as $e}from"./index-df899187.js";import{S as fe}from"./State-93d76a17.js";import{c as j,a as pe,b as ge,l as Ve,r as me,d as Qe,e as xe,f as Je,g as Ze,h as et,i as tt,B as _e}from"./colorToUniform-99fd8620.js";import{U as k,T as M,R as K,S as be}from"./TexturePool-18db19ce.js";import{C as H}from"./CanvasPool-d1c270f2.js";import{C as G,f as rt}from"./TextStyle-fd6710f0.js";import{P as st,M as Te,A as at,B as q,g as it,a as se}from"./PlaneGeometry-a218ddcb.js";import{G as nt}from"./Graphics-fcad995e.js";import{b as ot}from"./batchSamplersUniformGroup-2a8bd522.js";import{a as ct,H as lt,m as ut}from"./measureHtmlText-4b63b95a.js";class ye{static init(e){Object.defineProperty(this,"resizeTo",{set(t){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=t,t&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame(()=>this.resize()))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;this._cancelResize();let t,r;if(this._resizeTo===globalThis.window)t=globalThis.innerWidth,r=globalThis.innerHeight;else{const{clientWidth:s,clientHeight:a}=this._resizeTo;t=s,r=a}this.renderer.resize(t,r),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}ye.extension=p.Application;class Se{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,Ee.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?ee.shared:new ee,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}Se.extension=p.Application;class ve{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){e.action==="pushFilter"?this._renderer.filter.push(e):e.action==="popFilter"&&this._renderer.filter.pop()}destroy(){this._renderer=null}}ve.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"filter"};const dt=new R;function ht(i,e){return e.clear(),we(i,e),e.isValid||e.set(0,0,0,0),i.isRenderGroupRoot?e.applyMatrix(i.renderGroup.localTransform):e.applyMatrix(i.renderGroup.worldTransform),e}function we(i,e){if(i.localDisplayStatus!==7||!i.measurable)return;const t=!!i.effects.length;let r=e;if((i.isRenderGroupRoot||t)&&(r=z.get().clear()),i.boundsArea)e.addRect(i.boundsArea,i.worldTransform);else{if(i.renderPipeId){const a=i.bounds;r.addFrame(a.minX,a.minY,a.maxX,a.maxY,i.groupTransform)}const s=i.children;for(let a=0;a<s.length;a++)we(s[a],r)}if(t){let s=!1;for(let a=0;a<i.effects.length;a++)i.effects[a].addBounds&&(s||(s=!0,r.applyMatrix(i.renderGroup.worldTransform)),i.effects[a].addBounds(r,!0));s&&(r.applyMatrix(i.renderGroup.worldTransform.copyTo(dt).invert()),e.addBounds(r,i.relativeGroupTransform)),e.addBounds(r),z.return(r)}else i.isRenderGroupRoot&&(e.addBounds(r,i.relativeGroupTransform),z.return(r))}function ft(i,e){e.clear();const t=e.matrix;for(let r=0;r<i.length;r++){const s=i[r];s.globalDisplayStatus<7||(e.matrix=s.worldTransform,s.addBounds(e))}return e.matrix=t,e}const pt=new Ye({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),location:0,format:"float32x2",stride:2*4,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class Be{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new ue({}),this.renderer=e}get activeBackTexture(){var e;return(e=this._activeFilterData)==null?void 0:e.backTexture}push(e){var f;const t=this.renderer,r=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const s=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,r.length===0){s.skip=!0;return}const a=s.bounds;e.renderables?ft(e.renderables,a):e.filterEffect.filterArea?(a.clear(),a.addRect(e.filterEffect.filterArea),a.applyMatrix(e.container.worldTransform)):ht(e.container,a);const n=t.renderTarget.rootRenderTarget.colorTexture.source;let o=n._resolution,c=0,u=n.antialias,l=!1,d=!1;for(let g=0;g<r.length;g++){const m=r[g];if(o=Math.min(o,m.resolution),c+=m.padding,m.antialias!=="inherit"&&(m.antialias==="on"?u=!0:u=!1),!!!(m.compatibleRenderers&t.type)){d=!1;break}if(m.blendRequired&&!(((f=t.backBuffer)==null?void 0:f.useBackBuffer)??!0)){de("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),d=!1;break}d=m.enabled||d,l=l||m.blendRequired}if(!d){s.skip=!0;return}const h=t.renderTarget.rootViewPort;if(a.scale(o).fitBounds(0,h.width,0,h.height).scale(1/o).pad(c).ceil(),!a.isPositive){s.skip=!0;return}s.skip=!1,s.bounds=a,s.blendRequired=l,s.container=e.container,s.filterEffect=e.filterEffect,s.previousRenderSurface=t.renderTarget.renderSurface,s.inputTexture=M.getOptimalTexture(a.width,a.height,o,u),t.renderTarget.bind(s.inputTexture,!0),t.globalUniforms.push({offset:a})}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const r=t.inputTexture,s=t.bounds;let a=U.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const o=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,c=e.renderTarget.getRenderTarget(t.previousRenderSurface);a=this.getBackTexture(c,s,o)}t.backTexture=a;const n=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(a.source,3),e.globalUniforms.pop(),n.length===1)n[0].apply(this,r,t.previousRenderSurface,!1),M.returnTexture(r);else{let o=t.inputTexture,c=M.getOptimalTexture(s.width,s.height,o.source._resolution,!1),u=0;for(u=0;u<n.length-1;++u){n[u].apply(this,o,c,!0);const d=o;o=c,c=d}n[u].apply(this,o,t.previousRenderSurface,!1),M.returnTexture(o),M.returnTexture(c)}t.blendRequired&&M.returnTexture(a)}getBackTexture(e,t,r){const s=e.colorTexture.source._resolution,a=M.getOptimalTexture(t.width,t.height,s,!1);let n=t.minX,o=t.minY;r&&(n-=r.minX,o-=r.minY),n=Math.floor(n*s),o=Math.floor(o*s);const c=Math.ceil(t.width*s),u=Math.ceil(t.height*s);return this.renderer.renderTarget.copyToTexture(e,a,{x:n,y:o},{width:c,height:u},{x:0,y:0}),a}applyFilter(e,t,r,s){const a=this.renderer,n=this._filterStack[this._filterStackIndex],o=n.bounds,c=Xe.shared,l=n.previousRenderSurface===r;let d=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,h=this._filterStackIndex-1;for(;h>0&&this._filterStack[h].skip;)--h;h>0&&(d=this._filterStack[h].inputTexture.source._resolution);const f=this._filterGlobalUniforms,g=f.uniforms,m=g.uOutputFrame,x=g.uInputSize,_=g.uInputPixel,b=g.uInputClamp,T=g.uGlobalFrame,B=g.uOutputTexture;if(l){let P=this._filterStackIndex;for(;P>0;){P--;const F=this._filterStack[this._filterStackIndex-1];if(!F.skip){c.x=F.bounds.minX,c.y=F.bounds.minY;break}}m[0]=o.minX-c.x,m[1]=o.minY-c.y}else m[0]=0,m[1]=0;m[2]=t.frame.width,m[3]=t.frame.height,x[0]=t.source.width,x[1]=t.source.height,x[2]=1/x[0],x[3]=1/x[1],_[0]=t.source.pixelWidth,_[1]=t.source.pixelHeight,_[2]=1/_[0],_[3]=1/_[1],b[0]=.5*_[2],b[1]=.5*_[3],b[2]=t.frame.width*x[2]-.5*_[2],b[3]=t.frame.height*x[3]-.5*_[3];const C=this.renderer.renderTarget.rootRenderTarget.colorTexture;T[0]=c.x*d,T[1]=c.y*d,T[2]=C.source.width*d,T[3]=C.source.height*d;const y=this.renderer.renderTarget.getRenderTarget(r);if(a.renderTarget.bind(r,!!s),r instanceof U?(B[0]=r.frame.width,B[1]=r.frame.height):(B[0]=y.width,B[1]=y.height),B[2]=y.isRoot?-1:1,f.update(),a.renderPipes.uniformBatch){const P=a.renderPipes.uniformBatch.getUboResource(f);this._globalFilterBindGroup.setResource(P,0)}else this._globalFilterBindGroup.setResource(f,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,a.encoder.draw({geometry:pt,shader:e,state:e._state,topology:"triangle-list"}),a.type===K.WEBGL&&a.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new he,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const r=this._activeFilterData,s=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),a=t.worldTransform.copyTo(R.shared);return a.invert(),s.prepend(a),s.scale(1/t.texture.frame.width,1/t.texture.frame.height),s.translate(t.anchor.x,t.anchor.y),s}}Be.extension={type:[p.WebGLSystem,p.WebGPUSystem],name:"filter"};class Ce{constructor(e,t){this.state=fe.for2d(),this._graphicsBatchesHash=Object.create(null),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=e.context,r=!!this._graphicsBatchesHash[e.uid],s=this.renderer.graphicsContext.updateGpuContext(t);return!!(s.isBatchable||r!==s.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e._didGraphicsUpdate&&(e._didGraphicsUpdate=!1,this._rebuild(e)),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let r=0;r<t.length;r++){const s=t[r];s.batcher.updateElement(s)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid)}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const a=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const n=a.resources.localUniforms.uniforms;n.uTransformMatrix=e.groupTransform,n.uRound=t._roundPixels|e._roundPixels,j(e.groupColorAlpha,n.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],r=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),r.isBatchable&&this._initBatchesForRenderable(e),e.batched=r.isBatchable}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,s=this._getBatchesForRenderable(e);for(let a=0;a<s.length;a++){const n=s[a];r.addToBatch(n,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,r=this.renderer.graphicsContext.getGpuContext(t),s=this.renderer._roundPixels|e._roundPixels,a=r.batches.map(n=>{const o=v.get(Ne);return n.copyTo(o),o.renderable=e,o.roundPixels=s,o});return this._graphicsBatchesHash[e.uid]=a,e.on("destroyed",()=>{this.destroyRenderable(e)}),a}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach(t=>{v.return(t)}),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}Ce.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"graphics"};class ${constructor(){this.batcher=null,this.batch=null,this.roundPixels=0,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get blendMode(){return this.mesh.groupBlendMode}reset(){this.mesh=null,this.texture=null,this.batcher=null,this.batch=null}packIndex(e,t,r){const s=this.geometry.indices;for(let a=0;a<s.length;a++)e[t++]=s[a]+r}packAttributes(e,t,r,s){const a=this.mesh,n=this.geometry,o=a.groupTransform,c=s<<16|this.roundPixels&65535,u=o.a,l=o.b,d=o.c,h=o.d,f=o.tx,g=o.ty,m=n.positions,x=n.getBuffer("aUV"),_=x.data;let b=_;const T=this.texture.textureMatrix;T.isSimple||(b=this._transformedUvs,(this._textureMatrixUpdateId!==T._updateID||this._uvUpdateId!==x._updateID)&&((!b||b.length<_.length)&&(b=this._transformedUvs=new Float32Array(_.length)),this._textureMatrixUpdateId=T._updateID,this._uvUpdateId=x._updateID,T.multiplyUvs(_,b)));const B=a.groupColorAlpha;for(let C=0;C<m.length;C+=2){const y=m[C],P=m[C+1];e[r]=u*y+d*P+f,e[r+1]=l*y+h*P+g,e[r+2]=b[C],e[r+3]=b[C+1],t[r+4]=B,t[r+5]=c,r+=6}}get vertexSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}class Pe{constructor(e,t){this.localUniforms=new k({uTransformMatrix:{value:new R,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new ue({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,s=e.batched;if(t.batched=s,r!==s)return!0;if(s){const a=e._geometry;if(a.indices.length!==t.indexSize||a.positions.length!==t.vertexSize)return t.indexSize=a.indices.length,t.vertexSize=a.positions.length,!0;const n=this._getBatchableMesh(e),o=e.texture;if(n.texture._source!==o._source&&n.texture._source!==o._source)return!n.batcher.checkAndUpdateTexture(n,o)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,{batched:s}=this._getMeshData(e);if(s){const a=this._getBatchableMesh(e);a.texture=e._texture,a.geometry=e._geometry,r.addToBatch(a)}else r.break(t),t.add({renderPipeId:"mesh",mesh:e})}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.texture=e._texture,t.geometry=e._geometry,t.batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(v.return(t),this._gpuBatchableMeshHash[e.uid]=null)}execute({mesh:e}){if(!e.isRenderable)return;e.state.blendMode=e.groupBlendMode;const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),j(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){var t,r;return this._meshDataHash[e.uid]={batched:e.batched,indexSize:(t=e._geometry.indices)==null?void 0:t.length,vertexSize:(r=e._geometry.positions)==null?void 0:r.length},e.on("destroyed",()=>{this.destroyRenderable(e)}),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=v.get($);return t.mesh=e,t.texture=e._texture,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t.mesh=e,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&v.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}Pe.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"mesh"};const Me=class Re extends st{constructor(e={}){e={...Re.defaultOptions,...e},super({width:e.width,height:e.height,verticesX:4,verticesY:4}),this.update(e)}update(e){this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,t=this._leftWidth+this._rightWidth,r=this.width>t?1:this.width/t,s=this._topHeight+this._bottomHeight,a=this.height>s?1:this.height/s,n=Math.min(r,a);e[9]=e[11]=e[13]=e[15]=this._topHeight*n,e[17]=e[19]=e[21]=e[23]=this.height-this._bottomHeight*n,e[25]=e[27]=e[29]=e[31]=this.height,e[2]=e[10]=e[18]=e[26]=this._leftWidth*n,e[4]=e[12]=e[20]=e[28]=this.width-this._rightWidth*n,e[6]=e[14]=e[22]=e[30]=this.width,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,r=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=r*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};Me.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let gt=Me;class Fe{constructor(e){this._gpuSpriteHash=Object.create(null),this._renderer=e}addRenderable(e,t){const r=this._getGpuSprite(e);e._didSpriteUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e._didSpriteUpdate&&this._updateBatchableSprite(e,t),t.batcher.updateElement(t)}validateRenderable(e){const t=e._texture,r=this._getGpuSprite(e);return r.texture._source!==t._source?!r.batcher.checkAndUpdateTexture(r,t):!1}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];v.return(t),this._gpuSpriteHash[e.uid]=null}_updateBatchableSprite(e,t){e._didSpriteUpdate=!1,t.geometry.update(e),t.texture=e._texture}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=new $;return t.geometry=new gt,t.mesh=e,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e.on("destroyed",()=>{this.destroyRenderable(e)}),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}Fe.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"nineSliceSprite"};const mt={name:"tiling-bit",vertex:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`
            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;

            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;
        `},fragment:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`

            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);
            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;
            var unclamped = coord;
            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);

            var bias = 0.;

            if(unclamped.x == coord.x && unclamped.y == coord.y)
            {
                bias = -32.;
            } 

            outColor = textureSampleBias(uTexture, uSampler, coord, bias);
        `}},xt={name:"tiling-bit",vertex:{header:`
            uniform mat3 uTextureTransform;
            uniform vec4 uSizeAnchor;
        
        `,main:`
            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;

            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;
        `},fragment:{header:`
            uniform sampler2D uTexture;
            uniform mat3 uMapCoord;
            uniform vec4 uClampFrame;
            uniform vec2 uClampOffset;
        `,main:`

        vec2 coord = vUV + ceil(uClampOffset - vUV);
        coord = (uMapCoord * vec3(coord, 1.0)).xy;
        vec2 unclamped = coord;
        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);
        
        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0
    
        `}};let O,L;class _t extends be{constructor(){O??(O=pe({name:"tiling-sprite-shader",bits:[Ve,mt,me]})),L??(L=ge({name:"tiling-sprite-shader",bits:[Qe,xt,xe]}));const e=new k({uMapCoord:{value:new R,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new R,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:L,gpuProgram:O,resources:{localUniforms:new k({uTransformMatrix:{value:new R,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:U.EMPTY.source,uSampler:U.EMPTY.source.style}})}updateUniforms(e,t,r,s,a,n){const o=this.resources.tilingUniforms,c=n.width,u=n.height,l=n.textureMatrix,d=o.uniforms.uTextureTransform;d.set(r.a*c/e,r.b*c/t,r.c*u/e,r.d*u/t,r.tx/e,r.ty/t),d.invert(),o.uniforms.uMapCoord=l.mapCoord,o.uniforms.uClampFrame=l.uClampFrame,o.uniforms.uClampOffset=l.uClampOffset,o.uniforms.uTextureTransform=d,o.uniforms.uSizeAnchor[0]=e,o.uniforms.uSizeAnchor[1]=t,o.uniforms.uSizeAnchor[2]=s,o.uniforms.uSizeAnchor[3]=a,n&&(this.resources.uTexture=n.source,this.resources.uSampler=n.source.style)}}class bt extends Te{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}function Tt(i,e){const t=i.anchor.x,r=i.anchor.y;e[0]=-t*i.width,e[1]=-r*i.height,e[2]=(1-t)*i.width,e[3]=-r*i.height,e[4]=(1-t)*i.width,e[5]=(1-r)*i.height,e[6]=-t*i.width,e[7]=(1-r)*i.height}function yt(i,e,t,r){let s=0;const a=i.length/(e||2),n=r.a,o=r.b,c=r.c,u=r.d,l=r.tx,d=r.ty;for(t*=e;s<a;){const h=i[t],f=i[t+1];i[t]=n*h+c*f+l,i[t+1]=o*h+u*f+d,t+=e,s++}}function St(i,e){const t=i.texture,r=t.frame.width,s=t.frame.height;let a=0,n=0;i._applyAnchorToTexture&&(a=i.anchor.x,n=i.anchor.y),e[0]=e[6]=-a,e[2]=e[4]=1-a,e[1]=e[3]=-n,e[5]=e[7]=1-n;const o=R.shared;o.copyFrom(i._tileTransform.matrix),o.tx/=i.width,o.ty/=i.height,o.invert(),o.scale(i.width/r,i.height/s),yt(e,2,0,o)}const D=new bt;class Ue{constructor(e){this._tilingSpriteDataHash=Object.create(null),this._renderer=e}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const s=t.canBatch;if(s&&s===r){const{batchableMesh:a}=t;if(a.texture._source!==e.texture._source)return!a.batcher.checkAndUpdateTexture(a,e.texture)}return r!==s}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const s=this._getTilingSpriteData(e),{geometry:a,canBatch:n}=s;if(n){s.batchableMesh||(s.batchableMesh=new $);const o=s.batchableMesh;e._didTilingSpriteUpdate&&(e._didTilingSpriteUpdate=!1,this._updateBatchableMesh(e),o.geometry=a,o.mesh=e,o.texture=e._texture),o.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(o)}else r.break(t),s.shader||(s.shader=new _t),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,j(e.groupColorAlpha,r.uColor,0),this._renderer.encoder.draw({geometry:D,shader:t,state:fe.default2d})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:s}=t;e._didTilingSpriteUpdate&&this._updateBatchableMesh(e),s.batcher.updateElement(s)}else if(e._didTilingSpriteUpdate){const{shader:s}=t;s.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}e._didTilingSpriteUpdate=!1}destroyRenderable(e){var r;const t=this._getTilingSpriteData(e);t.batchableMesh=null,(r=t.shader)==null||r.destroy(),this._tilingSpriteDataHash[e.uid]=null}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new Te({indices:D.indices,positions:D.positions.slice(),uvs:D.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",()=>{this.destroyRenderable(e)}),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,s=e.texture.source.style;s.addressMode!=="repeat"&&(s.addressMode="repeat",s.update()),St(e,r.uvs),Tt(e,r.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let s=!0;return this._renderer.type===K.WEBGL&&(s=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(s||r.source.isPowerOfTwo),t.canBatch}}Ue.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"tilingSprite"};const E={test(i){return typeof i=="string"&&i.startsWith("info face=")},parse(i){const e=i.match(/^[a-z]+\s+.+$/gm),t={info:[],common:[],page:[],char:[],chars:[],kerning:[],kernings:[],distanceField:[]};for(const d in e){const h=e[d].match(/^[a-z]+/gm)[0],f=e[d].match(/[a-zA-Z]+=([^\s"']+|"([^"]*)")/gm),g={};for(const m in f){const x=f[m].split("="),_=x[0],b=x[1].replace(/"/gm,""),T=parseFloat(b),B=isNaN(T)?b:T;g[_]=B}t[h].push(g)}const r={chars:{},pages:[],lineHeight:0,fontSize:0,fontFamily:"",distanceField:null,baseLineOffset:0},[s]=t.info,[a]=t.common,[n]=t.distanceField??[];n&&(r.distanceField={range:parseInt(n.distanceRange,10),type:n.fieldType}),r.fontSize=parseInt(s.size,10),r.fontFamily=s.face,r.lineHeight=parseInt(a.lineHeight,10);const o=t.page;for(let d=0;d<o.length;d++)r.pages.push({id:parseInt(o[d].id,10)||0,file:o[d].file});const c={};r.baseLineOffset=r.lineHeight-parseInt(a.base,10);const u=t.char;for(let d=0;d<u.length;d++){const h=u[d],f=parseInt(h.id,10);let g=h.letter??h.char??String.fromCharCode(f);g==="space"&&(g=" "),c[f]=g,r.chars[g]={id:f,page:parseInt(h.page,10)||0,x:parseInt(h.x,10),y:parseInt(h.y,10),width:parseInt(h.width,10),height:parseInt(h.height,10),xOffset:parseInt(h.xoffset,10),yOffset:parseInt(h.yoffset,10),xAdvance:parseInt(h.xadvance,10),kerning:{}}}const l=t.kerning||[];for(let d=0;d<l.length;d++){const h=parseInt(l[d].first,10),f=parseInt(l[d].second,10),g=parseInt(l[d].amount,10);r.chars[c[f]].kerning[c[h]]=g}return r}},ae={test(i){const e=i;return typeof e!="string"&&"getElementsByTagName"in e&&e.getElementsByTagName("page").length&&e.getElementsByTagName("info")[0].getAttribute("face")!==null},parse(i){const e={chars:{},pages:[],lineHeight:0,fontSize:0,fontFamily:"",distanceField:null,baseLineOffset:0},t=i.getElementsByTagName("info")[0],r=i.getElementsByTagName("common")[0],s=i.getElementsByTagName("distanceField")[0];s&&(e.distanceField={type:s.getAttribute("fieldType"),range:parseInt(s.getAttribute("distanceRange"),10)});const a=i.getElementsByTagName("page"),n=i.getElementsByTagName("char"),o=i.getElementsByTagName("kerning");e.fontSize=parseInt(t.getAttribute("size"),10),e.fontFamily=t.getAttribute("face"),e.lineHeight=parseInt(r.getAttribute("lineHeight"),10);for(let u=0;u<a.length;u++)e.pages.push({id:parseInt(a[u].getAttribute("id"),10)||0,file:a[u].getAttribute("file")});const c={};e.baseLineOffset=e.lineHeight-parseInt(r.getAttribute("base"),10);for(let u=0;u<n.length;u++){const l=n[u],d=parseInt(l.getAttribute("id"),10);let h=l.getAttribute("letter")??l.getAttribute("char")??String.fromCharCode(d);h==="space"&&(h=" "),c[d]=h,e.chars[h]={id:d,page:parseInt(l.getAttribute("page"),10)||0,x:parseInt(l.getAttribute("x"),10),y:parseInt(l.getAttribute("y"),10),width:parseInt(l.getAttribute("width"),10),height:parseInt(l.getAttribute("height"),10),xOffset:parseInt(l.getAttribute("xoffset"),10),yOffset:parseInt(l.getAttribute("yoffset"),10),xAdvance:parseInt(l.getAttribute("xadvance"),10),kerning:{}}}for(let u=0;u<o.length;u++){const l=parseInt(o[u].getAttribute("first"),10),d=parseInt(o[u].getAttribute("second"),10),h=parseInt(o[u].getAttribute("amount"),10);e.chars[c[d]].kerning[c[l]]=h}return e}},ie={test(i){return typeof i=="string"&&i.includes("<font>")?ae.test(A.get().parseXML(i)):!1},parse(i){return ae.parse(A.get().parseXML(i))}};class Ge extends at{constructor(e,t){super();const{textures:r,data:s}=e;Object.keys(s.pages).forEach(a=>{const n=s.pages[parseInt(a,10)],o=r[n.id];this.pages.push({texture:o})}),Object.keys(s.chars).forEach(a=>{const n=s.chars[a],o=r[n.page].source,c=new Y(n.x,n.y,n.width,n.height),u=new U({source:o,frame:c});this.chars[a]={id:a.codePointAt(0),xOffset:n.xOffset,yOffset:n.yOffset,xAdvance:n.xAdvance,kerning:n.kerning??{},texture:u}}),this.baseRenderedFontSize=s.fontSize,this.baseMeasurementFontSize=s.fontSize,this.fontMetrics={ascent:0,descent:0,fontSize:s.fontSize},this.baseLineOffset=s.baseLineOffset,this.lineHeight=s.lineHeight,this.fontFamily=s.fontFamily,this.distanceField=s.distanceField??{type:"none",range:0},this.url=t}destroy(){super.destroy();for(let e=0;e<this.pages.length;e++){const{texture:t}=this.pages[e];t.destroy(!0)}this.pages=null}static install(e){q.install(e)}static uninstall(e){q.uninstall(e)}}const vt=[".xml",".fnt"],wt={extension:p.CacheParser,test:i=>i instanceof Ge,getCacheableAssets(i,e){const t={};return i.forEach(r=>{t[r]=e}),t[`${e.fontFamily}-bitmap`]=e,t}},Bt={extension:{type:p.LoadParser,priority:qe.Normal},test(i){return vt.includes(W.extname(i).toLowerCase())},async testParse(i){return E.test(i)||ie.test(i)},async parse(i,e,t){const r=E.test(i)?E.parse(i):ie.parse(i),{src:s}=e,{pages:a}=r,n=[];for(let l=0;l<a.length;++l){const d=a[l].file;let h=W.join(W.dirname(s),d);h=je(h,s),n.push(h)}const o=await t.load(n),c=n.map(l=>o[l]);return new Ge({data:r,textures:c},s)},async load(i,e){return await(await A.get().fetch(i)).text()},async unload(i,e,t){await Promise.all(i.pages.map(r=>t.unload(r.texture.source._sourceOrigin))),i.destroy()}},Ct={name:"local-uniform-msdf-bit",vertex:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32,
                uRound:f32,
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
        `,main:`
            vColor *= localUniforms.uColor;
            modelMatrix *= localUniforms.uTransformMatrix;
        `,end:`
            if(localUniforms.uRound == 1)
            {
                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);
            }
        `},fragment:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
         `,main:` 
            outColor = vColor * calculateMSDFAlpha(outColor, localUniforms.uDistance);
        `}},Pt={name:"local-uniform-msdf-bit",vertex:{header:`
            uniform mat3 uTransformMatrix;
            uniform vec4 uColor;
            uniform float uRound;
        `,main:`
            vColor *= uColor;
            modelMatrix *= uTransformMatrix;
        `,end:`
            if(uRound == 1.)
            {
                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
            }
        `},fragment:{header:`
            uniform float uDistance;
         `,main:` 
            outColor = vColor * calculateMSDFAlpha(outColor, uDistance);
        `}},Mt={name:"msdf-bit",fragment:{header:`
            fn calculateMSDFAlpha(msdfColor:vec4<f32>, distance:f32) -> f32 {
                
                // MSDF
                var median = msdfColor.r + msdfColor.g + msdfColor.b -
                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));
            
                // SDF
                median = min(median, msdfColor.a);

                var screenPxDistance = distance * (median - 0.5);
                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                return alpha;
            }
        `}},Rt={name:"msdf-bit",fragment:{header:`
            float calculateMSDFAlpha(vec4 msdfColor, float distance) {
                
                // MSDF
                float median = msdfColor.r + msdfColor.g + msdfColor.b -
                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));
               
                // SDF
                median = min(median, msdfColor.a);
            
                float screenPxDistance = distance * (median - 0.5);
                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
           
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                return alpha;
            }
        `}};class Ft extends be{constructor(){const e=new k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new R,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=pe({name:"sdf-shader",bits:[Je,Ze(te),Ct,Mt,me]}),r=ge({name:"sdf-shader",bits:[et,tt(te),Pt,Rt,xe]});super({glProgram:r,gpuProgram:t,resources:{localUniforms:e,batchSamplers:ot}})}}class Ae{constructor(e){this._gpuBitmapText={},this._renderer=e}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);ne(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){v.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);ne(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){var f;const{context:r}=t,s=q.getFont(e.text,e._style);r.clear(),s.distanceField.type!=="none"&&(r.customShader||(this._sdfShader||(this._sdfShader=new Ft),r.customShader=this._sdfShader));const a=Array.from(e.text),n=e._style;let o=(((f=n._stroke)==null?void 0:f.width)||0)/2;o+=s.baseLineOffset;const c=it(a,n,s);let u=0;const l=n.padding,d=c.scale;r.translate(-e._anchor._x*c.width-l,-e._anchor._y*(c.height+c.offsetY)-l).scale(d,d);const h=n._fill.color;for(let g=0;g<c.lines.length;g++){const m=c.lines[g];for(let x=0;x<m.charPositions.length;x++){const _=a[u++],b=s.chars[_];b!=null&&b.texture&&r.texture(b.texture,h||"black",Math.round(m.charPositions[x]+b.xOffset),Math.round(o+b.yOffset))}o+=s.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=v.get(nt);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",()=>{this.destroyRenderable(e)}),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,s=X.get(`${r}-bitmap`),{a,b:n,c:o,d:c}=e.groupTransform,u=Math.sqrt(a*a+n*n),l=Math.sqrt(o*o+c*c),d=(Math.abs(u)+Math.abs(l))/2,h=s.baseRenderedFontSize/e._style.fontSize,f=e.resolution??this._renderer.resolution,g=d*s.distanceField.range*(1/h)*f;t.customShader.resources.localUniforms.uniforms.uDistance=g}destroy(){var e;for(const t in this._gpuBitmapText)this._destroyRenderableByUid(t);this._gpuBitmapText=null,(e=this._sdfShader)==null||e.destroy(!0),this._sdfShader=null,this._renderer=null}}Ae.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"bitmapText"};function ne(i,e){e.groupTransform=i.groupTransform,e.groupColorAlpha=i.groupColorAlpha,e.groupColor=i.groupColor,e.groupBlendMode=i.groupBlendMode,e.globalDisplayStatus=i.globalDisplayStatus,e.groupTransform=i.groupTransform,e.localDisplayStatus=i.localDisplayStatus,e.groupAlpha=i.groupAlpha,e._roundPixels=i._roundPixels}class ke{constructor(e){this._gpuText=Object.create(null),this._renderer=e}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==r}addRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r.batcher.updateElement(r)}destroyRenderable(e){this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),v.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),s=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e).catch(n=>{console.error(n)}),e._didTextUpdate=!1;const a=e._style.padding;N(s.bounds,e._anchor,s.texture,a)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=r;const s=e.resolution??this._renderer.resolution,a=await this._renderer.htmlText.getManagedTexture(e.text,s,e._style,e._getKey()),n=t.batchableSprite;n.texture=t.texture=a,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate();const o=e._style.padding;N(n.bounds,e._anchor,n.texture,o)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:U.EMPTY,currentKey:"--",batchableSprite:v.get(_e),textureNeedsUploading:!1,generatingTexture:!1},r=t.batchableSprite;return r.renderable=e,r.texture=U.EMPTY,r.bounds={minX:0,maxX:1,minY:0,maxY:0},r.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e.on("destroyed",()=>{this.destroyRenderable(e)}),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}ke.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"htmlText"};function Ut(){const{userAgent:i}=A.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(i)}const Gt=new he;function De(i,e,t,r){const s=Gt;s.minX=0,s.minY=0,s.maxX=i.width/r|0,s.maxY=i.height/r|0;const a=M.getOptimalTexture(s.width,s.height,r,!1);return a.source.uploadMethodId="image",a.source.resource=i,a.source.alphaMode="premultiply-alpha-on-upload",a.frame.width=e/r,a.frame.height=t/r,a.source.emit("update",a.source),a.updateUvs(),a}function At(i,e){const t=e.fontFamily,r=[],s={},a=/font-family:([^;"\s]+)/g,n=i.match(a);function o(c){s[c]||(r.push(c),s[c]=!0)}if(Array.isArray(t))for(let c=0;c<t.length;c++)o(t[c]);else o(t);n&&n.forEach(c=>{const u=c.split(":")[1].trim();o(u)});for(const c in e.tagStyles){const u=e.tagStyles[c].fontFamily;o(u)}return r}async function kt(i){const t=await(await A.get().fetch(i)).blob(),r=new FileReader;return await new Promise((a,n)=>{r.onloadend=()=>a(r.result),r.onerror=n,r.readAsDataURL(t)})}async function oe(i,e){const t=await kt(e);return`@font-face {
        font-family: "${i.fontFamily}";
        src: url('${t}');
        font-weight: ${i.fontWeight};
        font-style: ${i.fontStyle};
    }`}const I=new Map;async function Dt(i,e,t){const r=i.filter(s=>X.has(`${s}-and-url`)).map((s,a)=>{if(!I.has(s)){const{url:n}=X.get(`${s}-and-url`);a===0?I.set(s,oe(e,n)):I.set(s,oe({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:s},n))}return I.get(s)});return(await Promise.all(r)).join(`
`)}function It(i,e,t,r,s){const{domElement:a,styleElement:n,svgRoot:o}=s;a.innerHTML=`<style>${e.cssStyle}</style><div>${i}</div>`,a.setAttribute("style",`transform: scale(${t});transform-origin: top left; display: inline-block`),n.textContent=r;const{width:c,height:u}=s.image;return o.setAttribute("width",c.toString()),o.setAttribute("height",u.toString()),new XMLSerializer().serializeToString(o)}function Ht(i,e){const t=H.getOptimalCanvasAndContext(i.width,i.height,e),{context:r}=t;return r.clearRect(0,0,i.width,i.height),r.drawImage(i,0,0),H.returnCanvasAndContext(t),t.canvas}function zt(i,e,t){return new Promise(async r=>{t&&await new Promise(s=>setTimeout(s,100)),i.onload=()=>{r()},i.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(e)}`,i.crossOrigin="anonymous"})}class V{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===K.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,r,s){if(this._activeTextures[s])return this._increaseReferenceCount(s),this._activeTextures[s].promise;const a=this._buildTexturePromise(e,t,r).then(n=>(this._activeTextures[s].texture=n,n));return this._activeTextures[s]={texture:null,promise:a,usageCount:1},a}async _buildTexturePromise(e,t,r){const s=v.get(ct),a=At(e,r),n=await Dt(a,r,lt.defaultTextStyle),o=ut(e,r,n,s),c=Math.ceil(Math.ceil(Math.max(1,o.width)+r.padding*2)*t),u=Math.ceil(Math.ceil(Math.max(1,o.height)+r.padding*2)*t),l=s.image;l.width=c|0,l.height=u|0;const d=It(e,r,t,n,s);await zt(l,d,Ut()&&a.length>0);let h=l;this._createCanvas&&(h=Ht(l,t));const f=De(h,l.width,l.height,t);return this._createCanvas&&this._renderer.texture.initSource(f.source),v.return(s),f}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,t.usageCount===0&&(t.texture?this._cleanUp(t):t.promise.then(r=>{t.texture=r,this._cleanUp(t)}).catch(()=>{de("HTMLTextSystem: Failed to clean texture")}),this._activeTextures[e]=null))}_cleanUp(e){M.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}V.extension={type:[p.WebGLSystem,p.WebGPUSystem,p.CanvasSystem],name:"htmlText"};V.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"};class Ie{constructor(e){this._gpuText=Object.create(null),this._renderer=e}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();if(t.currentKey!==r){const s=e.resolution??this._renderer.resolution,{width:a,height:n}=this._renderer.canvasText.getTextureSize(e.text,s,e._style);return!(this._renderer.canvasText.getReferenceCount(t.currentKey)===1&&a===t.texture._source.width&&n===t.texture._source.height)}return!1}addRenderable(e,t){const s=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(s)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r.batcher.updateElement(r)}destroyRenderable(e){this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),v.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),s=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1;const a=e._style.padding;N(s.bounds,e._anchor,s.texture,a)}_updateGpuText(e){const t=this._getGpuText(e),r=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey);const s=e.resolution??this._renderer.resolution;t.texture=r.texture=this._renderer.canvasText.getTexture(e.text,s,e._style,e._getKey()),t.currentKey=e._getKey(),r.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:v.get(_e)};return t.batchableSprite.renderable=e,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,this._updateText(e),e.on("destroyed",()=>{this.destroyRenderable(e)}),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}Ie.extension={type:[p.WebGLPipes,p.WebGPUPipes,p.CanvasPipes],name:"text"};function ce(i,e,t){for(let r=0,s=4*t*e;r<e;++r,s+=4)if(i[s+3]!==0)return!1;return!0}function le(i,e,t,r,s){const a=4*e;for(let n=r,o=r*a+4*t;n<=s;++n,o+=a)if(i[o+3]!==0)return!1;return!0}function Wt(i,e=1){const{width:t,height:r}=i,s=i.getContext("2d",{willReadFrequently:!0});if(s===null)throw new TypeError("Failed to get canvas 2D context");const n=s.getImageData(0,0,t,r).data;let o=0,c=0,u=t-1,l=r-1;for(;c<r&&ce(n,t,c);)++c;if(c===r)return Y.EMPTY;for(;ce(n,t,l);)--l;for(;le(n,t,o,c,l);)++o;for(;le(n,t,u,c,l);)--u;return++u,++l,new Y(o/e,c/e,(u-o)/e,(l-c)/e)}class He{constructor(){this._activeTextures={}}getTextureSize(e,t,r){const s=G.measureText(e||" ",r);let a=Math.ceil(Math.ceil(Math.max(1,s.width)+r.padding*2)*t),n=Math.ceil(Math.ceil(Math.max(1,s.height)+r.padding*2)*t);return a=Math.ceil(a-1e-6),n=Math.ceil(n-1e-6),a=re(a),n=re(n),{width:a,height:n}}getTexture(e,t,r,s){if(this._activeTextures[s])return this._increaseReferenceCount(s),this._activeTextures[s].texture;const a=G.measureText(e||" ",r),n=Math.ceil(Math.ceil(Math.max(1,a.width)+r.padding*2)*t),o=Math.ceil(Math.ceil(Math.max(1,a.height)+r.padding*2)*t),c=H.getOptimalCanvasAndContext(n,o),{canvas:u}=c;this.renderTextToCanvas(e,r,t,c);const l=De(u,n,o,t);if(r.trim){const d=Wt(u,t);l.frame.copyFrom(d),l.updateUvs()}return this._activeTextures[s]={canvasAndContext:c,texture:l,usageCount:1},l}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];if(t.usageCount--,t.usageCount===0){H.returnCanvasAndContext(t.canvasAndContext),M.returnTexture(t.texture);const r=t.texture.source;r.resource=null,r.uploadMethodId="unknown",r.alphaMode="no-premultiply-alpha",this._activeTextures[e]=null}}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,r,s){var b,T,B,C;const{canvas:a,context:n}=s,o=rt(t),c=G.measureText(e||" ",t),u=c.lines,l=c.lineHeight,d=c.lineWidths,h=c.maxLineWidth,f=c.fontProperties,g=a.height;if(n.resetTransform(),n.scale(r,r),n.clearRect(0,0,c.width+4,c.height+4),(b=t._stroke)!=null&&b.width){const y=t._stroke;n.lineWidth=y.width,n.miterLimit=y.miterLimit,n.lineJoin=y.join,n.lineCap=y.cap}n.font=o;let m,x;const _=t.dropShadow?2:1;for(let y=0;y<_;++y){const P=t.dropShadow&&y===0,F=P?Math.ceil(Math.max(1,g)+t.padding*2):0,ze=F*r;if(P){n.fillStyle="black",n.strokeStyle="black";const S=t.dropShadow,We=S.color,Oe=S.alpha;n.shadowColor=Ke.shared.setValue(We).setAlpha(Oe).toRgbaString();const Le=S.blur*r,Z=S.distance*r;n.shadowBlur=Le,n.shadowOffsetX=Math.cos(S.angle)*Z,n.shadowOffsetY=Math.sin(S.angle)*Z+ze}else n.globalAlpha=((T=t._fill)==null?void 0:T.alpha)??1,n.fillStyle=t._fill?se(t._fill,n):null,(B=t._stroke)!=null&&B.width&&(n.strokeStyle=se(t._stroke,n)),n.shadowColor="black";let Q=(l-f.fontSize)/2;l-f.fontSize<0&&(Q=0);const J=((C=t._stroke)==null?void 0:C.width)??0;for(let S=0;S<u.length;S++)m=J/2,x=J/2+S*l+f.ascent+Q,t.align==="right"?m+=h-d[S]:t.align==="center"&&(m+=(h-d[S])/2),t._stroke&&this._drawLetterSpacing(u[S],t,s,m+t.padding,x+t.padding-F,!0),t._fill!==void 0&&this._drawLetterSpacing(u[S],t,s,m+t.padding,x+t.padding-F)}}_drawLetterSpacing(e,t,r,s,a,n=!1){const{context:o}=r,c=t.letterSpacing;let u=!1;if(G.experimentalLetterSpacingSupported&&(G.experimentalLetterSpacing?(o.letterSpacing=`${c}px`,o.textLetterSpacing=`${c}px`,u=!0):(o.letterSpacing="0px",o.textLetterSpacing="0px")),c===0||u){n?o.strokeText(e,s,a):o.fillText(e,s,a);return}let l=s;const d=G.graphemeSegmenter(e);let h=o.measureText(e).width,f=0;for(let g=0;g<d.length;++g){const m=d[g];n?o.strokeText(m,l,a):o.fillText(m,l,a);let x="";for(let _=g+1;_<d.length;++_)x+=d[_];f=o.measureText(x).width,l+=h-f+c,h=f}}destroy(){this._activeTextures=null}}He.extension={type:[p.WebGLSystem,p.WebGPUSystem,p.CanvasSystem],name:"canvasText"};w.add(ye);w.add(Se);w.add(Ce);w.add($e);w.add(Pe);w.add(He);w.add(Ie);w.add(Ae,Bt,wt);w.add(V);w.add(ke);w.add(Ue);w.add(Fe);w.add(Be);w.add(ve);
